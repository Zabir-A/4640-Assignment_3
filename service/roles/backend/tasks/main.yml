---
- name: Include vars (backend + DB servers (db endpoint) )
  include_vars: "../../../group_vars/group_variables.yml"

- name: Install packages
  ansible.builtin.apt:
    name:
      - git
      - libmysqlclient-dev
      - pkg-config
      - python3-dev
      - python3-pip
      - python3-pymysql
    state: present
  become: true

- name: Create application database
  community.mysql.mysql_db:
    name: "{{ db_name }}"
    state: present
    login_host: "{{ db_endpoint }}"
    login_user: root
    login_password: "{{ mysql_root_password }}"

- name: Create application user & grant all priviledges
  community.mysql.mysql_user:
    name: "{{ db_user }}"
    host: "%"
    password: "{{ db_password }}"
    priv: "{{ db_name }}.*:ALL"
    state: present
    login_host: "{{ db_endpoint }}"
    login_user: root
    login_password: "{{ mysql_root_password }}"

- name: Create table for the app & insert data
  community.mysql.mysql_query:
    login_host: "{{ db_endpoint }}"
    login_user: "{{ db_user }}"
    login_password: "{{ db_password }}"
    query: 
      - USE {{ db_name }};
      - CREATE TABLE IF NOT EXISTS item (name varchar(30) NOT NULL, bcit_id varchar(10) NOT NULL, PRIMARY KEY (bcit_id)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
      - INSERT IGNORE INTO item (name, bcit_id) VALUES ('Zabir Ahasan', 'A01077201');

- name: Create group for application
  ansible.builtin.group:
    name: "backend"
    state: present
  become: true

- name: Create OS user for application
  ansible.builtin.user:
    name: "backend"
    system: yes
    group: "backend"
    shell: "/bin/bash"
    create_home: yes
    home: "/home/backend"
    state: present
  become: true

- name: Clone application repository
  ansible.builtin.git:
    repo: https://github.com/timoguic/acit4640-py-mysql.git
    dest: '/backend/src'
    clone: yes
    version: master
  become: true

- name: Copy the backend directory to the desired location
  ansible.builtin.copy:
    src: /backend/src/backend
    dest: /home/backend
    owner: "backend"
    group: "backend"
    mode: "0755"
    remote_src: yes
  become: true

- name: Ensure backend user owns the backend directory
  ansible.builtin.file:
    path: "/home/backend"
    state: directory
    owner: backend
    group: backend
    mode: '0755'
    recurse: yes
  become: true

- name: Pip install requirements
  environment:
    HOME: "/home/backend"
  ansible.builtin.pip:
    executable: pip3
    requirements: /home/backend/backend/requirements.txt
    extra_args: "--user --break-system-packages"
  become: true
      
- name: Copy over backend conf file
  ansible.builtin.template:
    src: backend.conf.j2
    dest: /home/backend/backend/backend.conf
  become: true

- name: Create systemd service file
  ansible.builtin.template:
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service
  notify: reload & restart systemd service
  become: true

- name: Enable & start backend service
  ansible.builtin.systemd:
    name: backend.service
    enabled: yes
    state: started
    daemon_reload: yes
  become: true